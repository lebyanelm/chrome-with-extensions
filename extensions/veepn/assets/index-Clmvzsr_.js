var H=Object.defineProperty;var z=(n,e,t)=>e in n?H(n,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):n[e]=t;var A=(n,e,t)=>z(n,typeof e!="symbol"?e+"":e,t);import{S as N,m as f,b as v}from"./index-Cmg072g4.js";import{z as i,S as y,m as O,o as M,k as C,E as L,g as j,u as k,j as B,F as w,s as Q,e as V,f as W,b as K,a as $,w as G,q as J,l as Z,h as X,p as Y,d as ee,c as te,n as ie}from"./index-BHXggChp.js";const R="nl";var T=(n=>(n[n.public=0]="public",n[n.private=1]="private",n))(T||{}),E=(n=>(n[n.free=0]="free",n[n.premium=1]="premium",n))(E||{}),se=(n=>(n.free="free",n.premium="premium",n.custom="custom",n))(se||{});const ae=i.object({id:i.string(),name:i.string(),code:i.string(),phrases:i.string().array()}),oe=i.object({id:i.string(),name:i.string(),phrases:i.string().array(),region:i.string(),via:i.string(),target:i.string(),countryCode:i.string(),type:i.nativeEnum(T),proxyType:i.nativeEnum(E)}),ne=i.object({region:i.string(),name:i.string(),description:i.string(),countryCode:i.string(),latitude:i.string(),longitude:i.string(),networkLoad:i.string(),priority:i.number(),type:i.nativeEnum(T),proxy_type:i.nativeEnum(E)}),ce=i.object({id:i.string(),type:i.literal(2)}),re=i.object({id:i.string(),type:i.literal(1),items:ce.array()}),ue=i.object({countries:ae.array(),locations:oe.array(),items:re.array()}),le=i.object({data:ue.optional(),updatedAt:i.number()}),he=i.object({type:i.nativeEnum(T),region:i.string(),regionName:i.string(),countryName:i.string(),countryCode:i.string()}),ve=i.object({activeId:i.string().optional().describe(y.persist),favoriteIds:i.string().array().optional().describe(y.persist),locations:le.optional().describe(y.persist),lastActiveLocationData:he.optional().describe(y.persist)}).default({}),pe=new O(ve);function de(n){return ne.safeParse(n).success}const Se=12*60*60*1e3;class me extends N{constructor(e){super(),this.locationStorage=e}get activeLocation(){var t;return!this.locationStorage.state.activeId||!((t=this.locationStorage.state.locations)!=null&&t.data)?null:this.locationStorage.state.locations.data.locations.find(s=>s.id===this.locationStorage.state.activeId)??null}get activeLocationId(){return this.locationStorage.state.activeId??""}get favoriteLocations(){return this.locationStorage.state.favoriteIds??[]}get locationsData(){var e;return((e=this.locationStorage.state.locations)==null?void 0:e.data)??null}get lastActiveLocation(){return this.locationStorage.state.lastActiveLocationData??null}get needUpdateLocations(){return this.locationStorage.state.locations?this.locationStorage.state.locations.updatedAt+Se<Date.now():!0}get defaultLocationId(){var t;const e=(t=this.locationsData)==null?void 0:t.locations.find(s=>s.region===R);return e==null?void 0:e.id}async boot(){await this.locationStorage.sync(),this.bootResolve(),await this.bootPromise}async setLocationsData(e){await this.locationStorage.setItems({locations:{data:e,updatedAt:Date.now()}})}async setActiveLocation(e){var s,a,r;let t;if(typeof e=="string")t=e;else if(de(e)){const o=(s=this.locationsData)==null?void 0:s.locations.find(c=>{const u=c.region===e.region,p=c.proxyType===e.proxy_type;return u&&p});t=o==null?void 0:o.id}else{const o=(a=this.locationsData)==null?void 0:a.locations.find(c=>c.region===R);t=o==null?void 0:o.id}if(t?await this.locationStorage.setItems({activeId:t}):await this.locationStorage.removeItems("activeId"),this.activeLocation){const o=(r=this.locationsData)==null?void 0:r.countries.find(u=>u.code===this.activeLocation.countryCode),c={type:this.activeLocation.type,region:this.activeLocation.region,regionName:this.activeLocation.name,countryName:(o==null?void 0:o.name)??"N/A",countryCode:this.activeLocation.countryCode};await this.locationStorage.setItems({lastActiveLocationData:c})}else await this.locationStorage.removeItems("lastActiveLocationData")}async removeActiveLocation(){await this.locationStorage.removeItems("activeId")}async setFavoriteLocations(e){const t=[...new Set([...this.favoriteLocations,...e])];await this.locationStorage.setItems({favoriteIds:t})}async removeFavoriteLocations(e){const t=this.favoriteLocations.filter(s=>!e.includes(s));await this.locationStorage.setItems({favoriteIds:t})}}const ge=new M("location",pe,C),q=new me(ge),ye=i.object({active:i.boolean(),interval:i.number(),count:i.number(),nextTimestamp:i.number(),startedAt:i.number()}),we=i.object({showState:ye.optional().describe(y.session)}).default({}),fe=new O(we),_e=24*60*60*1e3,be=5*1e3,F=[10*1e3,5*60*1e3,15*60*1e3,50*60*1e3];class Le extends N{constructor(e,t,s,a,r){super(),this.lockScreenStorage=e,this.globalStateService=t,this.messageService=s,this.userService=a,this.abTestsService=r}get active(){const e=this.abTestsService.getExperimentStatus(L.lockScreen),t=this.userService.userType==="free",s=this.globalStateService.installedAt+_e,a=Date.now()>s;return e.active&&t&&a}get showState(){return this.lockScreenStorage.state.showState}async boot(){await this.lockScreenStorage.sync(),this.bootResolve(),await this.bootPromise}async iterateShowState(){const{showState:e}=this.lockScreenStorage.state,t=e?e.count+1:0,s=F[t]??F.at(-1),a=(e==null?void 0:e.startedAt)??Date.now();await this.lockScreenStorage.setItems({showState:{startedAt:a,active:this.active,count:t,interval:be,nextTimestamp:Date.now()+s}}),this.messageService.notifyTab({type:"lock-screen-show-state-change",success:!0,data:this.showState})}async removeShowState(){await this.lockScreenStorage.removeItems("showState"),this.messageService.notifyTab({type:"lock-screen-show-state-change",success:!0,data:this.showState})}}const Ce=new M("lock-screen",fe,C),Te=new Le(Ce,j,f,k,B),x="2.1",Ae="2.95";class De{constructor(e,t,s,a,r,o,c,u,p,h,d){this.globalStateService=e,this.apiFreeService=t,this.apiPremiumService=s,this.userService=a,this.locationService=r,this.accessService=o,this.analyticsService=c,this.messageService=u,this.eventService=p,this.webrtcService=h,this.abTestsService=d,this.eventService.subscribe({"premium-refresh-token-failed":this.premiumRefreshTokenFailedListener.bind(this),"free-refresh-token-failed":this.freeRefreshTokenFailedListener.bind(this)})}async init(){this.apiFreeService.hasTokens||await this.launch()}async launch(){const e=await this.apiFreeService.fetch({method:"POST",url:"apiLaunch",body:{...this.apiFreeService.deviceInfo}});if(!e.success)return await this.criticalErrorOccured({status_code:w.getStatusCodeMessage(e)}),e;await this.apiFreeService.setTokens({accessToken:e.data.accessToken,refreshToken:""});const t=await this.apiFreeService.fetch({method:"POST",url:"apiLocationList"});if(!t.success)return await this.criticalErrorOccured({status_code:w.getStatusCodeMessage(t)}),t;if(await this.locationService.setLocationsData(t.data),!this.locationService.activeLocation)if(this.abTestsService.getExperimentStatus(L.limitLocations).active)await this.locationService.setActiveLocation(x);else{const a=e.data.user.default.location;await this.locationService.setActiveLocation(a)}return await this.globalStateService.setCriticalError(!1),{success:!0,data:{success:!0}}}async getCriticalError(){return await Promise.resolve(),{success:!0,data:{state:this.globalStateService.criticalError}}}async login(e){var r;const t=await this.apiPremiumService.fetch({method:"POST",url:"authLogin",body:{...this.apiFreeService.deviceInfo,...e}});if(!t.success)return t;await this.apiPremiumService.setTokens({accessToken:t.data.accessToken,refreshToken:t.data.refreshToken});const s=await this.apiPremiumService.fetch({method:"POST",url:"apiLocationList"});if(!s.success)return s;await this.locationService.setLocationsData(s.data),await this.userService.setUser(t.data.user),await this.userService.setSubscription(t.data.user.subscription);const a=await this.apiPremiumService.fetch({method:"GET",url:"apiSubscriptionShield"});if(a.success&&await this.userService.setSubscriptionBundle(a.data),this.userService.userType==="trial"){const o=await this.apiPremiumService.fetch({method:"GET",url:"apiSubscriptionCheckUsedTrial"});if(!o.success){const c={...t.data.user.subscription,status:Q.disabled};await this.userService.setSubscription(c);const u=((r=o.errors[0])==null?void 0:r.message)??"";u&&this.messageService.notifyPopup({type:"toast-message",success:!0,data:{id:"0",message:u,type:"warning"}})}}if(this.userService.hasPermitions("locations","premium")){const o=t.data.user.default.location;await this.locationService.setActiveLocation(o)}else if(this.abTestsService.getExperimentStatus(L.limitLocations).active)await this.locationService.setActiveLocation(Ae);else{const c=this.locationService.defaultLocationId;await this.locationService.setActiveLocation(c)}return await this.syncSubscriptionSlots(),this.webrtcService.needEnableWebrtc&&this.webrtcService.enable().catch(()=>{}),{success:!0,data:{success:!0}}}async logout(){const e=await this.apiPremiumService.fetch({method:"POST",url:"authLogout"});if(!e.success)return e;await this.userService.removeSubscription(),await this.userService.removeSubscriptionSlots(),await this.userService.removeSubscriptionBundle(),await this.userService.removeUser();const t=await this.apiFreeService.fetch({method:"POST",url:"apiLaunch",body:{...this.apiFreeService.deviceInfo}});if(!t.success)return await this.criticalErrorOccured({status_code:w.getStatusCodeMessage(t)}),t;await this.apiFreeService.setTokens({accessToken:t.data.accessToken,refreshToken:""});const s=await this.apiFreeService.fetch({method:"POST",url:"apiLocationList"});if(!s.success)return s;if(await this.locationService.setLocationsData(s.data),this.abTestsService.getExperimentStatus(L.limitLocations).active)await this.locationService.setActiveLocation(x);else{const r=t.data.user.default.location;await this.locationService.setActiveLocation(r),this.webrtcService.disable().catch(()=>{})}return{success:!0,data:{success:!0}}}async showAccountPage(e){const t=await this.apiPremiumService.fetch({method:"POST",url:"apiAccountAuthToken"});return t.success?(await this.accessService.proceedToWebsiteAccount({authToken:t.data.token,route:e.route,params:e.params??{}}),{success:!0,data:{success:!0}}):t}async registerAccount(){return await this.accessService.proceedToWebsitePage({page:"pricing",params:{utm_campaign:"signup"}}),{success:!0,data:{success:!0}}}async getUserData(){return await Promise.resolve(),{success:!0,data:{user:this.userService.user,subscription:this.userService.subscription,slots:this.userService.subscriptionSlots,hasBundle:this.userService.hasBundleSubscription,canUsePremium:this.userService.canUsePremium}}}async syncSubscriptionSlots(){const e=await this.apiPremiumService.fetch({method:"GET",url:"apiSubscriptionSlot"});return e.success?(await this.userService.setSubscriptionSlots(e.data),{success:!0,data:{slots:e.data}}):e}async logoutAllDevices(){const e=await this.apiPremiumService.fetch({method:"POST",url:"apiSlotRelease"});if(!e.success)return e;const t=await this.syncSubscriptionSlots();return t.success?{success:!0,data:t.data}:t}async premiumRefreshTokenFailedListener(e){(await this.logout()).success&&this.messageService.notifyPopup({type:"authentication-change",success:!0,data:{success:!0}}),this.analyticsService.sendEvent({types:["google-analytics"],name:"premium_refresh_token_failed",data:{status_message:e.disconnectReason,status_code:e.failedReason}})}async criticalErrorOccured(e){this.analyticsService.sendEvent({types:["google-analytics"],name:"critical_error_occured",data:{...e}}),await this.globalStateService.setCriticalError(!0),await this.apiFreeService.removeTokens()}async freeRefreshTokenFailedListener(e){await this.criticalErrorOccured({status_code:"free-refresh-token-failed"}),this.messageService.notifyPopup({type:"critical-error",success:!0,data:{success:!0}}),this.analyticsService.sendEvent({types:["google-analytics"],name:"free_refresh_token_failed",data:{status_message:e.disconnectReason,status_code:e.failedReason}})}}class ke{constructor(e,t){this.messageService=e,this.authController=t}init(){this.messageService.subscribe({"get-critical-error":this.getCriticalError.bind(this),login:this.login.bind(this),logout:this.logout.bind(this),"register-account":this.registerAccount.bind(this),"show-account-page":this.showAccountPage.bind(this),"get-user-data":this.getUserData.bind(this),"sync-subscription-slots":this.syncSubscriptionSlots.bind(this),"logout-all-devices":this.logoutAllDevices.bind(this)})}async getCriticalError(){return{...await this.authController.getCriticalError(),type:"get-critical-error"}}async login(e){return{...await this.authController.login(e),type:"login"}}async logout(){return{...await this.authController.logout(),type:"logout"}}async registerAccount(){return{...await this.authController.registerAccount(),type:"register-account"}}async showAccountPage(e){return{...await this.authController.showAccountPage(e),type:"show-account-page"}}async getUserData(){return{...await this.authController.getUserData(),type:"get-user-data"}}async syncSubscriptionSlots(){return{...await this.authController.syncSubscriptionSlots(),type:"sync-subscription-slots"}}async logoutAllDevices(){return{...await this.authController.logoutAllDevices(),type:"logout-all-devices"}}}const Ee=new De(j,V,W,k,q,K,$,f,C,G,B),Be=new ke(f,Ee),m=class m{async setImage(e){const t=e==="connected"?m.CONNECTED_ICONS:m.DISCONNECTED_ICONS;await v.action.setIcon({path:t}),await Promise.resolve(this)}async setTooltip(e){const s=v.runtime.getManifest().name;await v.action.setTitle({title:`${s}
${e}`}),await Promise.resolve(this)}};A(m,"CONNECTED_ICONS",{16:"/icons/16.png",32:"/icons/32.png",48:"/icons/48.png",64:"/icons/64.png",128:"/icons/128.png"}),A(m,"DISCONNECTED_ICONS",{16:"/icons/16-grey.png",32:"/icons/32-grey.png",48:"/icons/48-grey.png",64:"/icons/64-grey.png",128:"/icons/128-grey.png"});let D=m;const Ie=new D,Pe=["https://captive.apple.com/"],Re="https://cloudflare.com/cdn-cgi/trace",U="n/a";class Fe{constructor(e,t,s,a,r,o,c,u,p,h,d,g,_,l,S,b){this.messageService=e,this.analyticsService=t,this.eventService=s,this.fetchService=a,this.connectionService=r,this.apiFreeService=o,this.apiPremiumService=c,this.userService=u,this.locationService=p,this.exclusionsService=h,this.proxyService=d,this.iconService=g,this.i18nService=_,this.appService=l,this.notificationService=S,this.lockScreenService=b,this.eventService.subscribe({"free-refresh-token-failed":this.disconnect.bind(this),"premium-refresh-token-failed":this.disconnect.bind(this)})}get needAuthTrigger(){return this.appService.majorBrowserVersion===0?!1:this.appService.majorBrowserVersion<122}async init(){await this.updateIcon(),(!this.locationService.locationsData||this.locationService.needUpdateLocations)&&await this.updateLocationData(),this.connectionService.currentIp||await this.updateIpAddress()}async getLocationsData(){return await Promise.resolve(),{success:!0,data:{data:this.locationService.locationsData,activeId:this.locationService.activeLocationId,favoriteIds:this.locationService.favoriteLocations}}}async getLastActiveLocation(){return await Promise.resolve(),this.locationService.lastActiveLocation?{success:!0,data:this.locationService.lastActiveLocation}:{success:!1,errors:[{code:0,status:0,name:"",message:this.i18nService.t("base:connect-errors.no-location")}]}}async updateLocations(){const e=this.userService.hasPermitions("domain","premium")?await this.apiPremiumService.fetch({method:"POST",url:"apiLocationList"}):await this.apiFreeService.fetch({method:"POST",url:"apiLocationList"});return e.success?(await this.locationService.setLocationsData(e.data),{success:!0,data:{data:this.locationService.locationsData,activeId:this.locationService.activeLocationId,favoriteIds:this.locationService.favoriteLocations}}):e}async setActiveLocation(e){return await this.locationService.setActiveLocation(e),{success:!0,data:{success:!0}}}async setFavoriteLocations(e){return e.action==="add"?await this.locationService.setFavoriteLocations(e.list):await this.locationService.removeFavoriteLocations(e.list),{success:!0,data:{success:!0}}}async connect(){const e=Date.now();if(await this.changeConnectionStatus("connecting"),!this.locationService.activeLocation)return await this.changeConnectionStatus("disconnected"),{success:!1,errors:[{code:0,status:0,name:"",message:this.i18nService.t("base:connect-errors.no-location")}]};const{name:t,region:s}=this.locationService.activeLocation,a=`${s}, ${t}`;this.analyticsService.sendEvent({types:["aws-kinesis"],name:"connection_tried",data:{event_properties__screen_name:"vpn",event_properties__location:a}}),this.analyticsService.sendEvent({types:["google-analytics","amplitude"],name:"connection_tried",data:{country:this.locationService.activeLocation.countryCode,city:this.locationService.activeLocation.name,server_type:this.locationService.activeLocation.type,server_address:"no_addresses",server_region:this.locationService.activeLocation.id}});const r={protocol:"https",region:this.locationService.activeLocation.region,type:this.locationService.activeLocation.type},o=this.userService.hasPermitions("domain","premium")?await this.apiPremiumService.fetch({method:"POST",url:"apiServerList",body:r}):await this.apiFreeService.fetch({method:"POST",url:"apiServerList",body:r});if(!o.success)return await this.changeConnectionStatus("disconnected"),this.analyticsService.sendEvent({types:["google-analytics","amplitude"],name:"connection_failed_backend",data:{country:this.locationService.activeLocation.countryCode,city:this.locationService.activeLocation.name,server_type:this.locationService.activeLocation.type,server_address:"no_addresses",server_region:this.locationService.activeLocation.id,status_code:w.getStatusCodeMessage(o)}}),this.analyticsService.sendEvent({types:["aws-kinesis"],name:"connection_failed_backend",data:{event_properties__screen_name:"vpn",event_properties__location:a,event_properties__time_to_connect:Date.now()-e,event_properties__auto_connection:"",event_properties__server_address:"no_addresses"}}),{success:!1,errors:[{code:0,status:0,name:"",message:this.i18nService.t("base:connect-errors.server-config")}]};const c=o.data.map(l=>{const S=this.appService.isBlockAds?l.rpz_port:l.port;return{addresses:l.addresses,protocol:l.protocol,port:S}}),{username:u,password:p}=o.data[0];let h=!1,d="";for(let l=0;l<c.length;l+=1){const S=c[l],b=await this.proxyService.enable({serverConfig:[S],credentials:{username:u,password:p},nonRoutableNets:this.exclusionsService.nonRoutableNets,exclusionList:this.exclusionsService.exclusionList});if(!b.status){await this.changeConnectionStatus("disconnected"),h=!1,d=b.cause==="not_controllable"?this.i18nService.t("base:connect-errors.not-controllable"):this.i18nService.t("base:connect-errors.controlled-by-other-extensions");break}const I={country:this.locationService.activeLocation.countryCode,city:this.locationService.activeLocation.name,server_type:this.locationService.activeLocation.type,server_address:S.addresses[0],server_region:this.locationService.activeLocation.id};if(this.needAuthTrigger&&!await this.triggerAuthRequiredListener()){await this.proxyService.disable(),this.analyticsService.sendEvent({types:["google-analytics"],name:"connection_failed_create_tab",data:{...I,status_code:"tab-create"}}),this.analyticsService.sendEvent({types:["aws-kinesis"],name:"connection_failed_create_tab",data:{event_properties__screen_name:"vpn",event_properties__location:a,event_properties__time_to_connect:Date.now()-e,event_properties__auto_connection:"",event_properties__server_address:S.addresses[0]}});continue}const P=await this.checkInternetConnection();if(P.success){h=!0;break}else await this.proxyService.disable(),this.analyticsService.sendEvent({types:["google-analytics"],name:"connection_failed_availability_domain_1",data:{...I,status_code:w.getStatusCodeMessage(P)}})}const g=c.flatMap(l=>l.addresses).join(", "),_={country:this.locationService.activeLocation.countryCode,city:this.locationService.activeLocation.name,server_type:this.locationService.activeLocation.type,server_address:g,server_region:this.locationService.activeLocation.id};return h?(await this.connectionService.incrementConnectionCount(),await this.updateIpAddress(),await this.changeConnectionStatus("connected"),await this.updateIcon(),await this.createDownloadNotification(),this.analyticsService.sendEvent({types:["google-analytics","amplitude"],name:"connection_succeeded",data:_}),this.analyticsService.sendEvent({types:["aws-kinesis"],name:"connection_succeeded",data:{event_properties__screen_name:"vpn",event_properties__location:a,event_properties__time_to_connect:Date.now()-e,event_properties__auto_connection:"",event_properties__server_address:g}}),{success:!0,data:{success:!0}}):(await this.changeConnectionStatus("disconnected"),await this.proxyService.disable(),this.analyticsService.sendEvent({types:["google-analytics","amplitude"],name:"connection_failed_check",data:{..._,status_code:"loop_fixed_server"}}),this.analyticsService.sendEvent({types:["aws-kinesis"],name:"connection_failed_check",data:{event_properties__screen_name:"vpn",event_properties__location:a,event_properties__time_to_connect:Date.now()-e,event_properties__auto_connection:"",event_properties__server_address:g}}),{success:!1,errors:[{code:0,status:0,name:"",message:d||this.i18nService.t("base:connect-errors.captive")}]})}async disconnect(e){if(await this.changeConnectionStatus("disconnecting"),!await this.proxyService.disable())return{success:!1,errors:[{code:0,status:0,name:"",message:this.i18nService.t("base:disconnect-errors.remove-proxy")}]};await this.updateIpAddress(),await this.changeConnectionStatus("disconnected"),await this.updateIcon();const{name:s,region:a}=this.locationService.activeLocation??{name:"",region:""},r=`${a}, ${s}`;return this.analyticsService.sendEvent({types:["aws-kinesis"],name:"disconnected",data:{event_properties__screen_name:"vpn",event_properties__location:r,event_properties__disconnect_reason:e.disconnectReason,event_properties__failed_reason:e.failedReason}}),{success:!0,data:{success:!0}}}async getConnectionState(){await Promise.resolve();const e=this.connectionService.currentIp??U;return{success:!0,data:{status:this.connectionService.status,ip:e,connectionCount:this.connectionService.connectionCount}}}async getAutoConnectSetting(){return await Promise.resolve(),{success:!0,data:{status:this.connectionService.useAutoConnect}}}async setAutoConnectSetting(e){return await this.connectionService.setAutoConnect(e.status),{success:!0,data:{success:!0}}}async updateApiDomain(){return this.apiFreeService.isDomainAvailable||await this.apiFreeService.updateDomainData(),this.apiPremiumService.isDomainAvailable||await this.apiPremiumService.updateDomainData(),{success:!0,data:{success:!0}}}async triggerAuthRequiredListener(){const e=function(s){return new Promise((a,r)=>{v.tabs.create({url:s,active:!1}).then(o=>{const c=function(h,d){d.status==="complete"&&h===o.id&&(v.tabs.onUpdated.removeListener(c),v.tabs.remove(h).catch(()=>{}),clearTimeout(u),a(o))},u=setTimeout(()=>{v.tabs.onUpdated.removeListener(c),o.id&&v.tabs.remove(o.id).catch(()=>{}),clearTimeout(u),r(new Error("triggerAuthRequiredListener timeout reject"))},5e3);v.tabs.onUpdated.addListener(c)}).catch(r)})};try{const t=this.userService.hasPermitions("domain","premium")?this.apiPremiumService.apiDomainUrl:this.apiFreeService.apiDomainUrl;return await e(t),!0}catch{return!1}}async updateIpAddress(){const e=await this.fetchService.request({method:"GET",url:Re});if(e.success)try{const t=e.data.trim().split(/\n/).map(a=>a.split("=")),s=Object.fromEntries(t);await this.connectionService.setIpAddress(s.ip)}catch{this.analyticsService.sendEvent({types:["google-analytics"],name:"ip_parse_failed"})}else await this.connectionService.removeIpAddress(),this.analyticsService.sendEvent({types:["google-analytics","amplitude"],name:"ip_check_failed"})}async updateIcon(){var e;if(this.connectionService.isConnected){const t=((e=this.locationService.activeLocation)==null?void 0:e.name)??"VeePN",s=this.i18nService.t("base:connect-status.on",{tr_location:t});await this.iconService.setImage("connected"),await this.iconService.setTooltip(s)}else{const t=this.i18nService.t("base:connect-status.off");await this.iconService.setImage("disconnected"),await this.iconService.setTooltip(t)}}async updateLocationData(){const e=this.userService.hasPermitions("domain","premium")?await this.apiPremiumService.fetch({method:"POST",url:"apiLocationList"}):await this.apiFreeService.fetch({method:"POST",url:"apiLocationList"});e.success&&await this.locationService.setLocationsData(e.data)}async changeConnectionStatus(e){e==="disconnected"&&(await this.appService.setBlockAds(!1),await this.lockScreenService.removeShowState()),e==="connected"&&await this.lockScreenService.iterateShowState(),await this.connectionService.setConnectionStatus(e);const t=this.connectionService.currentIp??U;this.messageService.notifyPopup({type:"connection-change",success:!0,data:{status:this.connectionService.status,ip:t,connectionCount:this.connectionService.connectionCount}})}async createDownloadNotification(){this.connectionService.connectionCount<=3||Date.now()<this.appService.downloadNotificationTimestamp||(await this.notificationService.notify({options:{type:"image",title:this.i18nService.t("base:download-notification.title"),imageUrl:v.runtime.getURL("/images/desktop-notification.jpg"),message:this.i18nService.t("base:download-notification.message")},callback:"download-app"}),await this.appService.incrementDownloadNotificationTimestamp(),this.analyticsService.sendEvent({types:["google-analytics","amplitude"],name:"notify_popup_pc_download_shown"}))}async checkInternetConnection(){const e=await this.fetchService.request({method:"GET",url:Pe[0],cache:"no-cache"});return e.success&&e.data.toLocaleLowerCase().includes("success")?{success:!0,data:{success:!0}}:{success:!1,errors:[{code:0,status:0,name:"",message:this.i18nService.t("base:connect-errors.captive")}]}}}class xe{constructor(e,t){this.messageService=e,this.connectionController=t}init(){this.messageService.subscribe({connect:this.connect.bind(this),disconnect:this.disconnect.bind(this),"get-connection-state":this.getConnectionState.bind(this),"get-locations-data":this.getLocationsData.bind(this),"get-last-active-location":this.getLastActiveLocation.bind(this),"update-locations-data":this.updateLocations.bind(this),"set-active-location":this.setActiveLocation.bind(this),"set-favorite-locations":this.setFavoriteLocations.bind(this),"update-api-domain":this.updateApiDomain.bind(this),"get-auto-connect-setting":this.getAutoConnectSetting.bind(this),"set-auto-connect-setting":this.setAutoConnectSetting.bind(this)})}async connect(){return{...await this.connectionController.connect(),type:"connect"}}async disconnect(e){return{...await this.connectionController.disconnect(e),type:"disconnect"}}async getConnectionState(){return{...await this.connectionController.getConnectionState(),type:"get-connection-state"}}async getLocationsData(){return{...await this.connectionController.getLocationsData(),type:"get-locations-data"}}async getLastActiveLocation(){return{...await this.connectionController.getLastActiveLocation(),type:"get-last-active-location"}}async updateLocations(){return{...await this.connectionController.updateLocations(),type:"update-locations-data"}}async setActiveLocation(e){return{...await this.connectionController.setActiveLocation(e),type:"set-active-location"}}async setFavoriteLocations(e){return{...await this.connectionController.setFavoriteLocations(e),type:"set-favorite-locations"}}async updateApiDomain(){return{...await this.connectionController.updateApiDomain(),type:"update-api-domain"}}async getAutoConnectSetting(){return{...await this.connectionController.getAutoConnectSetting(),type:"get-auto-connect-setting"}}async setAutoConnectSetting(e){return{...await this.connectionController.setAutoConnectSetting(e),type:"set-auto-connect-setting"}}}const Ue=new Fe(f,$,C,J,Z,V,W,k,q,X,Y,Ie,ee,te,ie,Te),Ve=new xe(f,Ue);export{E as L,se as R,Be as a,Ve as b,Ue as c,q as d,Ee as e,T as f,Te as l};
